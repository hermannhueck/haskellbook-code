module Addition where


import Test.Hspec
import Test.QuickCheck
import Test.Hspec.QuickCheck (modifyMaxSize)


dividedBy :: Integral a => a -> a -> (a, a)
dividedBy num denom = go num denom 0
  where
    go n d count
      | n < d = (count, n)
      | otherwise = go (n - d) d (count + 1)

integralMult :: (Integral a) => a -> a -> a
integralMult x y
  | x == 0 = 0
  | y == 0 = 0
  | y > 0 = x + integralMult x (y - 1)
  | otherwise = negate (x + integralMult x ((-y) - 1))

testWithHspec :: IO ()
testWithHspec = hspec $ do
  describe "Addition" $ do
    it "1 + 1 is greater than 1" $ do
      (1 + 1) > (1 :: Integer) `shouldBe` True
    it "2 + 2 is equal to 4" $ do
      2 + 2 `shouldBe` (4 :: Integer)
    it "15 divided by 3 is 5" $ do
      dividedBy 15 3 `shouldBe` ((5, 0) :: (Integer, Integer))
    it "22 divided by 5 is 4 remainder 2" $ do
      dividedBy 22 5 `shouldBe` ((4, 2) :: (Integer, Integer))
    it "3 multiplied by 5 is 15" $ do
      integralMult 3 5 `shouldBe` (15 :: Integer)
    it "3 multiplied by (-5) is (-15)" $ do
      integralMult 3 (-5) `shouldBe` ((-15) :: Integer)
    it "(-3) multiplied by 5 is (-15)" $ do
      integralMult (-3) 5 `shouldBe` ((-15) :: Integer)
    it "(-3) multiplied by (-5) is 15" $ do
      integralMult (-3) (-5) `shouldBe` (15 :: Integer)

prop_dividedBy_asBool :: Integer -> Integer -> Bool
prop_dividedBy_asBool x y =
    x < 0 || y <= 0 ||
    dividedBy x y == x `divMod` y

prop_dividedBy_asProperty :: Integer -> Integer -> Property
prop_dividedBy_asProperty x y =
    x >= 0 && y > 0 ==>             -- using QuickCheck's implication operator
    dividedBy x y == x `divMod` y

testWithQuickCheckAndHspec :: IO ()
testWithQuickCheckAndHspec = hspec $ do
  describe "Addition" $ do
    it "1 + 1 is greater than 1" $ do
      property $ (1 + 1) > (1 :: Integer)   -- doesn't make much sense as no values are generated by quickCheck
    it "2 + 2 is equal to 4" $ do
      property $ 2 + 2 == (4 :: Integer)   -- doesn't make much sense as no values are generated by quickCheck
    it "x + 1 is always greater than x     -- using default of 100 successful runs" $ do
      property $ \x -> x + 1 > (x :: Int)
    modifyMaxSize (const 500) $ it "x + 1 is always greater than x     -- specifying 500 successful runs" $ do
      property $ \x -> x + 1 > (x :: Int)
    it "x multipliedBy y == x * y" $ do
      property $ ((\x y -> integralMult x y == x * y) :: Integer -> Integer -> Bool)
    it "x dividedBy y == x `divMod` y (only for positive values and y /= 0)" $ do
      property prop_dividedBy_asBool
    it "x dividedBy y == x `divMod` y (only for positive values and y /= 0) -- using ==> operator" $ do
      property prop_dividedBy_asProperty

testWithQuickCheckOnly :: IO ()
testWithQuickCheckOnly = do
    print "\nx + 1 is always greater than x     -- defaults to 100 successful tests"
    quickCheck $ \x -> x + 1 > (x :: Int)
    print "\nx + 1 is always greater than x     -- using 500 successful tests"
    quickCheckWith stdArgs { maxSuccess = 500 } $ \x -> x + 1 > (x :: Int)


main :: IO ()
main = do
  putStrLn "\n----- Testing with Hspec -----"
  testWithHspec
  putStrLn "\n----- Testing with QuickCheck + Hspec -----"
  testWithQuickCheckAndHspec
  putStrLn "\n----- Testing with QuickCheck only -----\n"
  testWithQuickCheckOnly
  putStrLn ""

----- Generating arbitrary values -----
---------------------------------------

trivialInt :: Gen Int
trivialInt = return 1

oneThroughThree :: Gen Int
oneThroughThree = elements [1, 2, 3]

oneThroughThree' :: Gen Int
oneThroughThree' = elements [1, 2, 2, 2, 2, 3]

-- choose :: System.Random.Random a
--        => (a, a) -> Gen a
-- elements :: [a] -> Gen a

genBool :: Gen Bool
genBool = choose (False, True)

genBool' :: Gen Bool
genBool' = elements [False, True]

genOrdering :: Gen Ordering
genOrdering = elements [LT, EQ, GT]

genChar :: Gen Char
genChar = elements ['a'..'z']

-- arbitrary pairs and triples

genTuple :: (Arbitrary a, Arbitrary b) => Gen (a, b)
genTuple = do
  a <- arbitrary
  b <- arbitrary
  return (a, b)

genThreeple :: (Arbitrary a, Arbitrary b, Arbitrary c) => Gen (a, b, c)
genThreeple = do
  a <- arbitrary
  b <- arbitrary
  c <- arbitrary
  return (a, b, c)

-- arbitrary Either and Maybe

genEither :: (Arbitrary a, Arbitrary b) => Gen (Either a b)
genEither = do
  a <- arbitrary
  b <- arbitrary
  elements [Left a, Right b]

-- equal probability
genMaybe :: Arbitrary a => Gen (Maybe a)
genMaybe = do
  a <- arbitrary
  elements [Nothing, Just a]

-- What QuickCheck does so you get more Just values
genMaybe' :: Arbitrary a => Gen (Maybe a)
genMaybe' = do
  a <- arbitrary
  frequency [ (1, return Nothing)
            , (3, return (Just a))]
-- frequency :: [(Int, Gen a)] -> Gen a

----- Using QuickCheck without Hspec -----
------------------------------------------

prop_additionGreater :: Int -> Bool
prop_additionGreater x = x + 1 > x

runQc :: IO ()
runQc = do
  quickCheck prop_additionGreater

runQc' :: IO ()
runQc' = do
  quickCheck ((\x -> x + 1 > x) :: Int -> Bool)
