-- 16-11-LikeEither.hs
--
-- 16.11 Ignoring possibilities, page 663
-- Short Exercise, page 668
--
-- 1. Write a Functor instance for a datatype identical to Either.
-- We’ll use our own datatype because Either has a Functor instance.
module LikeEither where

import Test.QuickCheck
import Test.QuickCheck.Function

-- properties for Functor laws
-- identity
functorIdentity :: (Functor f, Eq (f a)) => f a -> Bool
functorIdentity f = fmap id f == f

-- composition - only values generated by QuickCheck
functorCompose :: (Functor f, Eq (f c)) => (a -> b) -> (b -> c) -> f a -> Bool
functorCompose f g x = (fmap g (fmap f x)) == (fmap (g . f) x)

-- composition - QuickCheck generates the functions as well.
functorCompose' :: (Eq (f c), Functor f) => f a -> Fun a b -> Fun b c -> Bool
functorCompose' x (Fun _ f) (Fun _ g) =
  (fmap (g . f) x) == (fmap g . fmap f $ x)

type IntToInt = Fun Int Int

data Sum a b
  = First a
  | Second b
  deriving (Eq, Show)

instance Functor (Sum a) where
  fmap _ (First x) = First x
  fmap f (Second x) = Second (f x)

instance (Arbitrary a, Arbitrary b) => Arbitrary (Sum a b) where
  arbitrary = do
    x <- arbitrary
    y <- arbitrary
    oneof $ map return [First x, Second y]

main :: IO ()
main = do
  quickCheck (functorIdentity :: Sum Int Int -> Bool)
  quickCheck ((functorCompose (+ 1) (* 2)) :: Sum Int Int -> Bool)
  quickCheck (functorCompose' :: Sum Int Int -> IntToInt -> IntToInt -> Bool)
  putStrLn ""
  putStrLn
    "2. Why is a Functor instance that applies the function only to First, Either’s Left, impossible? We covered this earlier."
  putStrLn
    "==> The kinds are filled from left to right. Hence the last type argument is the one used for lifting with fmap."
